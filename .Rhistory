library(corrplot)
setwd("C:\\Users\\Aditya\\OneDrive - IIT Kanpur\\Teaching\\2023-24\\2023-24-II\\CE687\\Assignments\\Assignment_3\\Assignment_3_ped_data_variables_code")
#Import data
ped_data <- read.csv("ped_exposure_data_sample.csv")
# Calculate the correlation matrix
correlation_matrix <- cor(ped_data)
# Fit Linear Regression Model
linear_model <- lm(AnnualEst ~ ., data = ped_data)
summary(linear_model)  # View model summary
# get training and test data (80-20 split)
n<-nrow(pedvars)
set.seed(12345) ##changing the seed will change the training/test data sets
index <- sample(n, round(n*0.8))
train <- pedvars[index,] #80% of data
#Import data
pedvars <- read.csv("ped_exposure_data_sample.csv")
view(pedvars)
colnames(pedvars)
# get training and test data (80-20 split)
n<-nrow(pedvars)
set.seed(12345) ##changing the seed will change the training/test data sets
index <- sample(n, round(n*0.8))
train <- pedvars[index,] #80% of data
test <- pedvars[-index,] #20% of data
var<- c(8,18)
for(i in var){
print(colnames(pedvars[i]))
linear_model <- lm(AnnualEst~get(colnames(pedvars[i])),
data=train)
print(paste("loglik = ",logLik(linear_model)))
print(paste("AIC = ",AIC(linear_model)))
print(paste("BIC = ",BIC(linear_model)))
print(summary(linear_model))
print("________________________")
}
summary(linear_model)
library(tidyverse)
#install.packages("corrplot")
library(corrplot)
#Import data
pedvars <- read.csv("ped_exposure_data_sample.csv")
colnames(pedvars)
district_names<-unique(pedvars$District)
#str(pedvars)
n <- length(district_names)
numberofdata_vec <- c()
sd_vec <- c()
mean_vec <- c()
mean_L_vec <- c()
mean_U_vec <- c()
for(i in 1:n){
dist_data <- subset(pedvars,District == district_names[i])
numberofdata_vec <- c(numberofdata_vec,length(dist_data$AnnualEst))
sd_vec <- c(sd_vec,sd(dist_data$AnnualEst))
mean_vec <- c(mean_vec,mean(dist_data$AnnualEst))
confidence_interval_95 <- t.test(dist_data$AnnualEst, conf.level = 0.95)$conf.int
mean_L_vec <- c(mean_L_vec,confidence_interval_95[1])
mean_U_vec <- c(mean_U_vec,confidence_interval_95[2])
}
q2_ans <- data.frame(district_names,numberofdata_vec,mean_vec,sd_vec,mean_L_vec,mean_U_vec)
q2_ans <- q2_ans[order(district_names),]
q2_ans
summary(pedvars)
plot(pedvars$PopT,pedvars$WalkComT)
plot(pedvars$PopT,pedvars$HseHldT)
plot(pedvars$WalkComT,pedvars$HseHldT)
plot(pedvars$EmpSF_T,pedvars$EmpT)
plot(pedvars$StMetersT,pedvars$StSegT)
vec <- (pedvars$StMetersT)^2
vec
pedvars$StMetersT
vec <- log(pedvars$StSegT)
vec
cor(vec,pedvars$StMetersT)
cor(vec,pedvars$StSegT)
cor(pedvars$StMetersT,pedvars$StSegT)
set.seed(200522) ##changing the seed will change the training/test data sets
index <- sample(n, round(n*0.8))
train <- pedvars[index,] #80% of data
test <- pedvars[-index,] #20% of data
##########Revised Models #########
#Modeling AnnualEst#########
model_3 <- lm(AnnualEst~PopT+Signal+EmpSF_T,data=train)
summary(model_3)
#train
AnnualEst_pred_model_3<-predict(model_3,test)
model_3_rmse_train<-(sum(model_3$residuals^2)/nrow(train))^0.5
model_3_rmse_train
#test
model_3_rmse_test<-(sum((test$AnnualEst-AnnualEst_pred_model_3)^2)/nrow(test))^0.5
model_3_rmse_test
###Modeling logAnnualEst#########
model_4 <- lm(logAnnualEst~PopT+PrincArt+MinorArt+Int4way+SchoolsT+Signal+EmpSF_T+StMetersT,
data=train)
summary(model_4)
#train
AnnualEst_pred_model_4_train<-exp(predict(model_4,train))
AnnualEst_pred_model_4_test<-exp(predict(model_4,test))
#back-transformation
model_4_rmse_train<-(sum((train$AnnualEst-AnnualEst_pred_model_4_train)^2)/nrow(train))^0.5
model_4_rmse_train
#test
model_4_rmse_test<-(sum((test$AnnualEst-AnnualEst_pred_model_4_test)^2)/nrow(test))^0.5
model_4_rmse_test
#model_3_goodness-of-Fit
logLik(model_3)
AIC(model_3)
BIC(model_3)
#model_4_goodness-of-Fit
logLik(model_4)
AIC(model_4)
BIC(model_4)
#group_by summarize
volume_by_signal<-train%>%group_by(Signal) %>%
summarize(n=n(),mean_AADT=mean(AnnualEst))%>%
as.data.frame()
volume_by_signal
# draw plots
#plot of model_1 predicted vs actual
#for train data
prd<-predict(model_3,train)
plot(x=prd, y=train$AnnualEst,
xlab='Predicted AnnualEst',
ylab='Actual AnnualEst',
main='Predicted v/s Actual Values for model_1(train data)')
abline(a=0,b=1)
#for test data
prd<-predict(model_3,test)
plot(x=prd, y=test$AnnualEst,
xlab='Predicted AnnualEst',
ylab='Actual AnnualEst',
main='Predicted v/s Actual Values for model_1(test data)')
abline(a=0,b=1)
#plot of model_2 predicted vs actual
prd<-predict(model_4,train)
plot(x=prd, y=train$logAnnualEst,
xlab='Predicted logAnnualEst',
ylab='Actual logAnnualEst',
main='Predicted v/s Actual Values for model_2(train data)')
abline(a=0,b=1)
#for test data
prd<-predict(model_4,test)
plot(x=prd, y=test$logAnnualEst,
xlab='Predicted logAnnualEst',
ylab='Actual logAnnualEst',
main='Predicted v/s Actual Values for model_2(test data)')
abline(a=0,b=1)
####################
##Ques (vi)
##############
colnames(pedvars)
var<- c(8,18)
for(i in var){
print(colnames(pedvars[i]))
linear_model <- lm(AnnualEst~get(colnames(pedvars[i])),
data=train)
print(paste("loglik = ",logLik(linear_model)))
print(paste("AIC = ",AIC(linear_model)))
print(paste("BIC = ",BIC(linear_model)))
print(summary(linear_model))
print("________________________")
}
#Import data
pedvars <- read.csv("ped_exposure_data_sample.csv")
colnames(pedvars)
# get training and test data (80-20 split)
n<-nrow(pedvars)
set.seed(12345) ##changing the seed will change the training/test data sets
index <- sample(n, round(n*0.8))
train <- pedvars[index,] #80% of data
test <- pedvars[-index,] #20% of data
####################
##Ques (vi)
##############
colnames(pedvars)
var<- c(8,18)
for(i in var){
print(colnames(pedvars[i]))
linear_model <- lm(AnnualEst~get(colnames(pedvars[i])),
data=train)
print(paste("loglik = ",logLik(linear_model)))
print(paste("AIC = ",AIC(linear_model)))
print(paste("BIC = ",BIC(linear_model)))
print(summary(linear_model))
print("________________________")
}
summary(linear_model)
summary(linear_model)
########## Log-linear model
colnames(pedvars)
var<- c(8,18)
for(i in var){
print(colnames(pedvars[i]))
log_linear_model <- lm(logAnnualEst~get(colnames(pedvars[i])),
data=train)
print(paste("loglik = ",logLik(log_linear_model)))
print(paste("AIC = ",AIC(log_linear_model)))
print(paste("BIC = ",BIC(log_linear_model)))
print(summary(log_linear_model))
print("________________________")
}
summary(log_linear_model)
####model 1 goodness-of-Fit
logLik(linear_model)
AIC(linear_model)
BIC(linear_model)
#model 1: Prediction on test data
AnnualEst_pred_linear_model<-predict(linear_model,test)
#model 1: training RMSE
linear_model_rmse_train<-(sum(linear_model$residuals^2)/nrow(train))^0.5
print(linear_model_rmse_train)
#model 1: test RMSE
linear_model_rmse_test<-(sum((test$AnnualEst-AnnualEst_pred_linear_model)^2)/nrow(test))^0.5
print(linear_model_rmse_test)
####model 2 Goodness-of-Fit
logLik(log_linear_model)
AIC(log_linear_model)
BIC(log_linear_model)
#model 2: Prediction on train and test data and converting back from log
AnnualEst_pred_log_linear_model_train<-exp(predict(log_linear_model,train))
AnnualEst_pred_log_linear_model_test<-exp(predict(log_linear_model,test))
#model 2: training RMSE of not log, but back-transformed estimates
log_linear_model_rmse_train<-(sum((train$AnnualEst-AnnualEst_pred_log_linear_model_train)^2)/nrow(train))^0.5
print(log_linear_model_rmse_train)
#model 2: test RMSE
log_linear_model_rmse_test<-(sum((test$AnnualEst-AnnualEst_pred_log_linear_model_test)^2)/nrow(test))^0.5
print(log_linear_model_rmse_test)
library(CVXR)
x_ab <- Variable()
x_bc <- Variable()
x_cb <- Variable()
x_cd <- Variable()
objective <- Maximize(x_cd)#maximizing the flow in the link CD
constraints <- list(
x_ab >= 0,
x_ab <= 20,
x_bc >= 0,
x_bc <= 10,
x_cb >= 0,
x_cb <= 10,
x_cd >= 0,
x_cd <= 15,
x_ab == x_bc + x_cb,
x_cd == x_bc + x_cb
)
problem <- Problem(objective, constraints)
result <- solve(problem)
cat("Problem status:", result$status, "\n")
cat("Optimal values:\n")
cat("x_ab:", round(as.vector(result$getValue(x_ab)), 2), "\n")
cat("x_bc:", round(as.vector(result$getValue(x_bc)), 2), "\n")
cat("x_cb:", round(as.vector(result$getValue(x_cb)), 2), "\n")
cat("x_cd:", round(as.vector(result$getValue(x_cd)), 2), "\n")
cat("Objective value:", round(as.vector(result$getValue(objective)), 2), "\n")
